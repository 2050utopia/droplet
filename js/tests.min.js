/*! ice-editor 2014-01-11 */
(function(){test("Lisp unity",function(){var testString;return testString=function(string){return equal(ICE.lispParse(string).toString({indent:""}),string,"Unity test")},testString("(a b)"),testString("(a b (c d (e)))"),testString("(a b) (c d e (f g) h (i j k) (l m n) (((o) p)))"),testString("(def Y (lambda (g)\n  ((lambda (f) (g f f)) (lambda (f) (g f f)))))"),testString("To be thus is nothing,\nBut to be safely thus. Our fears in Banquo\nStick deep, and in his royalty of nature\nReigns that which would be feared. 'Tis much he\ndares,")}),test("Indent unity",function(){var testString;return testString=function(string){return equal(ICE.indentParse(string).toString({indent:""}),string,"Unity test")},testString("hello"),testString("if a is b\n  b c"),testString("Stars\n  In your multitudes\n  Scarce to be\n    Counted\n  Filling the \n    Darkness\n  With\n    Order and light\n  You are the\n    Sentinels\n    Silent and sure\n      Keeping watch in the night\n      Keeping watch in the night\nYou know your place in the sky")}),test("Lisp find",function(){var testString;return testString=function(string,fn,expected){return equal(ICE.lispParse(string).next.next.next.block.find(fn).toString({indent:""}),expected,"Find test on "+expected)},testString("(a b)",function(){return!0},"(a b)"),testString("(a (b c))",function(){return!0},"(b c)"),testString("(a (b (c (d))) e)",function(){return!0},"(d)"),testString("(a (b c) (d e))",function(){return!0},"(b c)"),testString("(a (b c) (d e))",function(block){return"d"===block.start.next.next.value},"(d e)"),testString("(def Y (lambda (g)\n  ((lambda (f) (g f f)) (lambda (f) (g f f)))))",function(block){return"f"===block.start.next.next.value},"(f)"),testString("(def Y (lambda (g)\n  ((lambda (f) (totally-unique f f)) (lambda (f) (g f f)))))",function(block){return"totally-unique"===block.start.next.next.value},"(totally-unique f f)"),testString("(def Y (lambda (g)\n  ((lambda (f) (totally-unique f f)) (lambda (f) (g f f)))))",function(){return!1},"(def Y (lambda (g)\n  ((lambda (f) (totally-unique f f)) (lambda (f) (g f f)))))")}),test("Lisp tree manipulation",function(){var block,lambda,start;return start=ICE.lispParse("(def Y (lambda (g)\n  ((lambda (f) (g f f)) (lambda (f) (g f f)))))"),block=start.next.next.next.block,lambda=block.find(function(x){return"lambda"===x.start.next.next.value}),lambda._moveTo(block.start.next),equal(block.toString({indent:""}),"((lambda (f) (g f f))def Y (lambda (g)\n  ( (lambda (f) (g f f)))))","Y-combinator tree move")})}).call(this);